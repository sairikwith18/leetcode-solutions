class Solution {
public:
    int bs(vector<int>& nums, int n) {
        int low = 1, high = n - 2;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == nums[mid - 1]) {
                if ((mid - 1) % 2 == 0)
                    low = mid + 1;
                else
                    high = mid - 1;
            } else if (nums[mid] == nums[mid + 1]) {
                if ((mid + 1) % 2 == 0)
                    high = mid - 1;
                else
                    low = mid + 1;
            } else
                return nums[mid];
        }
        return 0;
    }
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if (n == 1)
            return nums[0];
        else if (nums[0] != nums[1])
            return nums[0];
        else if (nums[n - 1] != nums[n - 2])
            return nums[n - 1];
        return bs(nums, n);
    }
};
